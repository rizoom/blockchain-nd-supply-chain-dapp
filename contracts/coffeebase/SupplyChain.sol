pragma solidity ^0.4.24;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole {
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint => Item) items;

    // Define enum 'State' with the following values:
    enum State
    {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased   // 7
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation;  // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude;  // Farm Longitude
        uint productID;  // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint productPrice; // Product Price
        State itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        msg.sender.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    // Initialize sku and upc
    constructor() public payable {
        sku = 1;
    }

    function _computeProductId(uint _sku, uint _upc) internal pure returns (uint) {
        return uint(keccak256(abi.encodePacked(_sku, _upc)));
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string _originFarmLatitude, string _originFarmLongitude, string _productNotes) public
    onlyFarmer
    verifyCaller(_originFarmerID)
    {
        // Add the new item as part of Harvest
        Item memory item = Item(
            sku, // sku
            _upc, // upc
            _originFarmerID, // ownerId,
            _originFarmerID, // originFarmerID
            _originFarmName, // originFarmName
            _originFarmInformation, // originFarmInformation
            _originFarmLatitude, // originFarmLatitude
            _originFarmLongitude, // originFarmLongitude
            _computeProductId(sku, _upc), // productId
            _productNotes, // productNotes
            0, // productPrice
            defaultState, // itemState
            address(0), // distributorID
            address(0), // retailerID
            address(0) // consumerID
        );

        // Store item in state mappings
        items[_upc] = item;

        // Increment sku
        sku = sku + 1;

        // Emit the appropriate event
        emit Harvested(_upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint _upc) public
    onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
    harvested(_upc)
        // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originFarmerID)
    {
        // Update the appropriate fields
        Item storage item = items[_upc];
        item.itemState = State.Processed;

        // Emit the appropriate event
        emit Processed(_upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint _upc) public
    onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
    processed(_upc)
        // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originFarmerID)
    {
        // Update the appropriate fields
        Item storage item = items[_upc];
        item.itemState = State.Packed;

        // Emit the appropriate event
        emit Packed(_upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public
    onlyFarmer
        // Call modifier to check if upc has passed previous supply chain stage
    packed(_upc)
        // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originFarmerID)
    {
        // Update the appropriate fields
        Item storage item = items[_upc];
        item.itemState = State.ForSale;
        item.productPrice = _price;

        // Emit the appropriate event
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc) public payable
    onlyDistributor
        // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
        // Call modifer to check if buyer has paid enough
    paidEnough(items[_upc].productPrice)
        // Call modifier to send any excess ether back to buyer
    checkValue(_upc)
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        Item storage item = items[_upc];
        item.itemState = State.Sold;
        item.ownerID = msg.sender;
        item.distributorID = msg.sender;

        // Transfer money to farmer
        item.originFarmerID.transfer(item.productPrice);

        // emit the appropriate event
        emit Sold(_upc);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint _upc) public
    onlyDistributor
        // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
        // Call modifier to verify caller of this function
    verifyCaller(items[_upc].distributorID)
    {
        // Update the appropriate fields
        Item storage item = items[_upc];
        item.itemState = State.Shipped;

        // Emit the appropriate event
        emit Shipped(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc) public
    onlyRetailer
        // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, retailerID, itemState
        Item storage item = items[_upc];
        item.itemState = State.Received;
        item.ownerID = msg.sender;
        item.retailerID = msg.sender;

        // Emit the appropriate event
        emit Received(_upc);

    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc) public
    onlyConsumer
        // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        Item storage item = items[_upc];
        item.itemState = State.Purchased;
        item.ownerID = msg.sender;
        item.consumerID = msg.sender;

        // Emit the appropriate event
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns
    (
        uint itemSKU,
        uint itemUPC,
        address ownerID,
        address originFarmerID,
        string originFarmName,
        string originFarmInformation,
        string originFarmLatitude,
        string originFarmLongitude
    )
    {
        // Assign values to the 8 parameters
        Item memory item = items[_upc];
        itemSKU = item.sku;
        itemUPC = item.upc;
        ownerID = item.ownerID;
        originFarmerID = item.originFarmerID;
        originFarmName = item.originFarmName;
        originFarmInformation = item.originFarmInformation;
        originFarmLatitude = item.originFarmLatitude;
        originFarmLongitude = item.originFarmLongitude;

        return
        (
        itemSKU,
        itemUPC,
        ownerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns
    (
        uint itemSKU,
        uint itemUPC,
        uint productID,
        string productNotes,
        uint productPrice,
        uint itemState,
        address distributorID,
        address retailerID,
        address consumerID
    )
    {
        // Assign values to the 9 parameters
        Item memory item = items[_upc];
        itemSKU = item.sku;
        itemUPC = item.upc;
        productID = item.productID;
        productNotes = item.productNotes;
        productPrice = item.productPrice;
        itemState = uint(item.itemState);
        distributorID = item.distributorID;
        retailerID = item.retailerID;
        consumerID = item.consumerID;

        return
        (
        itemSKU,
        itemUPC,
        productID,
        productNotes,
        productPrice,
        itemState,
        distributorID,
        retailerID,
        consumerID
        );
    }
}
