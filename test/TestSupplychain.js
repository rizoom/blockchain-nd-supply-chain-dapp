// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require("SupplyChain");

const checkResultBufferOne = (
  resultBufferOne,
  sku,
  upc,
  ownerId,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
) => {
  assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
  assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
  assert.equal(
    resultBufferOne[2],
    ownerId,
    "Error: Missing or Invalid ownerID"
  );
  assert.equal(
    resultBufferOne[3],
    originFarmerID,
    "Error: Missing or Invalid originFarmerID"
  );
  assert.equal(
    resultBufferOne[4],
    originFarmName,
    "Error: Missing or Invalid originFarmName"
  );
  assert.equal(
    resultBufferOne[5],
    originFarmInformation,
    "Error: Missing or Invalid originFarmInformation"
  );
  assert.equal(
    resultBufferOne[6],
    originFarmLatitude,
    "Error: Missing or Invalid originFarmLatitude"
  );
  assert.equal(
    resultBufferOne[7],
    originFarmLongitude,
    "Error: Missing or Invalid originFarmLongitude"
  );
};

const checkResultBufferTwo = (
  resultBufferTwo,
  sku,
  upc,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
) => {
  assert.equal(resultBufferTwo[0], sku, "Error: Invalid item SKU");
  assert.equal(resultBufferTwo[1], upc, "Error: Invalid item UPC");
  assert.equal(
    resultBufferTwo[2].toString(16),
    productID,
    "Error: Invalid item product ID"
  );
  assert.equal(
    resultBufferTwo[3],
    productNotes,
    "Error: Invalid item product notes"
  );
  assert.equal(
    resultBufferTwo[4],
    productPrice,
    "Error: Invalid item product price"
  );
  assert.equal(resultBufferTwo[5], itemState, "Error: Invalid item State");
  assert.equal(
    resultBufferTwo[6],
    distributorID,
    "Error: Invalid item distributorID"
  );
  assert.equal(
    resultBufferTwo[7],
    retailerID,
    "Error: Invalid item retailerID"
  );
  assert.equal(
    resultBufferTwo[8],
    consumerID,
    "Error: Invalid item consumerID"
  );
};

contract("SupplyChain", function(accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  const sku = 1;
  const upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  const productID =
    "cc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f";
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.toWei(1, "ether");
  const itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x0000000000000000000000000000000000000000";

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // Initialization through async IIFE
  // Add roles to required accounts
  (async () => {
    const supplyChain = await SupplyChain.deployed() /* then ? */;
    await supplyChain.addFarmer(originFarmerID, {from: ownerID});
    await supplyChain.addDistributor(distributorID, {from: ownerID});
    await supplyChain.addRetailer(retailerID, {from: ownerID});
    await supplyChain.addConsumer(consumerID, {from: ownerID});
  })();

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Harvested()
    const event = supplyChain.Harvested();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
      { from: originFarmerID }
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set - resultBufferOne
    checkResultBufferOne(
      resultBufferOne,
      sku,
      upc,
      originFarmerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
      resultBufferTwo,
      sku,
      upc,
      productID,
      productNotes,
      0,
      itemState,
      emptyAddress,
      emptyAddress,
      emptyAddress
    );
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Processed()
    const event = supplyChain.Processed();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set - resultBufferOne
    checkResultBufferOne(
      resultBufferOne,
      sku,
      upc,
      originFarmerID,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
      resultBufferTwo,
      sku,
      upc,
      productID,
      productNotes,
      0,
      1, // Processed
      emptyAddress,
      emptyAddress,
      emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Packed()
    const event = supplyChain.Packed();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        originFarmerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        0,
        2, // Packed
        emptyAddress,
        emptyAddress,
        emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event ForSale()
    const event = supplyChain.ForSale();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        originFarmerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        3, // ForSale
        emptyAddress,
        emptyAddress,
        emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Sold()
    const event = supplyChain.Sold();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.buyItem(upc, { from: distributorID, value: productPrice });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        distributorID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        4, // Sold
        distributorID,
        emptyAddress,
        emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Shipped()
    const event = supplyChain.Shipped();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Shipped by calling function shipItem()
    await supplyChain.shipItem(upc, { from: distributorID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        distributorID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        5, // Shipped
        distributorID,
        emptyAddress,
        emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Received()
    const event = supplyChain.Received();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Received by calling function receiveItem()
    await supplyChain.receiveItem(upc, { from: retailerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        retailerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        6, // Received
        distributorID,
        retailerID,
        emptyAddress
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;

    // Watch the emitted event Purchased()
    const event = supplyChain.Purchased();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Purchased by calling function purchaseItem()
    await supplyChain.purchaseItem(upc, { from: consumerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        consumerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        7, // Purchased
        distributorID,
        retailerID,
        consumerID
    );

    // Verify event emission
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const guestAccount = accounts[5];
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: guestAccount});

    // Verify the result set - resultBufferOne
    checkResultBufferOne(
        resultBufferOne,
        sku,
        upc,
        consumerID,
        originFarmerID,
        originFarmName,
        originFarmInformation,
        originFarmLatitude,
        originFarmLongitude
    );
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const guestAccount = accounts[5];
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: guestAccount});

    // Verify the result set - resultBufferTwo
    checkResultBufferTwo(
        resultBufferTwo,
        sku,
        upc,
        productID,
        productNotes,
        productPrice,
        7, // Purchased
        distributorID,
        retailerID,
        consumerID
    );
  });
});
